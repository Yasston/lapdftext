
import edu.isi.bmkeg.pdf.extraction.JPedalPageImageExtractor;
import edu.isi.bmkeg.pdf.extraction.exceptions.AccessException;
import edu.isi.bmkeg.pdf.extraction.exceptions.EncryptionException;
import edu.isi.bmkeg.pdf.model.ChunkBlock;
import edu.isi.bmkeg.pdf.model.Document;
import edu.isi.bmkeg.pdf.model.PageBlock;
import edu.isi.bmkeg.pdf.model.RTree.RTChunkBlock;
import edu.isi.bmkeg.pdf.model.ordering.SpatialOrdering;
import java.awt.Color;
import java.awt.Graphics;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.WindowConstants;
import org.jpedal.exception.PdfException;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Samih
 */
public class InterfaceAnnotation extends javax.swing.JFrame {

    /* Interface permettant d'annoter manuellement un PDF.*/
    List<ChunkBlock> chunks;
    List<PageBlock> pages;
    private int pageNum;
    private int chunkNum;
    private int pageMax;
    private int chunkMax;
    private JLabel lab;
    JPedalPageImageExtractor jpe;

    /**
     * Constructeur
     */
    public InterfaceAnnotation(Document doc, String filepath) throws PdfException, AccessException, EncryptionException {
        initComponents();
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        pageNum = 0;
        chunkNum = 0;
        pages = doc.getPageList();
        pageMax = pages.size() - 1;
        chunks = pages.get(0).getAllChunkBlocks(SpatialOrdering.VERTICAL_MODE);
        chunkMax = chunks.size();
        jpe = new JPedalPageImageExtractor();
        jpe.init(filepath);
        chunk.setIcon(new ImageIcon(jpe.getPageImages(pageNum)));
        this.setSize(pages.get(0).getPageBoxWidth(), pages.get(0).getPageBoxHeight() + 80);
        treatment(false);
        this.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent e) {
                ((RTChunkBlock) chunks.get(chunkNum)).setType_annote(type.getText().replaceAll("\\s", ""));
                dispose();
            }
        });

    }

    /**
     * Fonction permettant d'accéder au bloc suivant ou précédent, et appliquant
     * les modifications effectuées sur le bloc courant
     *
     * @param sens
     */
    public void treatment(boolean sens) {
        if (sens) {
            if (chunkNum < chunks.size() - 1) {
                chunkNum++;
            } else if (pageNum < pages.size() - 1) {
                chunkNum = 0;
                pageNum++;
                chunk.setIcon(new ImageIcon(jpe.getPageImages(pageNum)));
                chunks = pages.get(pageNum).getAllChunkBlocks(SpatialOrdering.VERTICAL_MODE);
            }
        } else {
            if (chunkNum > 0) {
                chunkNum--;
            } else if (pageNum > 0) {
                pageNum--;
                chunk.setIcon(new ImageIcon(jpe.getPageImages(pageNum)));
                chunks = pages.get(pageNum).getAllChunkBlocks(SpatialOrdering.VERTICAL_MODE);
                chunkNum = chunks.size() - 1;
            }
        }
        lab = new JLabel(/*constructor args here*/) {
                    @Override
                    public void paint(Graphics g) {
                        super.paint(g);
                        g.setColor(Color.red);
                        g.drawRect(chunks.get(chunkNum).getX1(), chunks.get(chunkNum).getY1(), chunks.get(chunkNum).getWidth(), chunks.get(chunkNum).getHeight());
                    }
                };
        lab.setSize(this.getWidth(), this.getHeight());
        lab.setLocation(0, 0);
        this.getContentPane().add(lab);
        this.getContentPane().setComponentZOrder(lab, 0);
        type.setText(((RTChunkBlock) chunks.get(chunkNum)).getType_annote());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        suiv = new javax.swing.JButton();
        prec = new javax.swing.JButton();
        chunk = new javax.swing.JLabel();
        type = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        suiv.setText("Suivant");
        suiv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                suivActionPerformed(evt);
            }
        });

        prec.setText("Précédent");
        prec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                precActionPerformed(evt);
            }
        });

        chunk.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        chunk.setMaximumSize(new java.awt.Dimension(2000, 2000));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(prec)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(type, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(suiv)
                .addContainerGap())
            .addComponent(chunk, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(chunk, javax.swing.GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(suiv)
                    .addComponent(prec)
                    .addComponent(type))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Fonction de gestion du bouton "Bloc précédent"
     */
    private void precActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_precActionPerformed
        // TODO add your handling code here:
        this.getContentPane().remove(lab);
        this.getContentPane().repaint();
        ((RTChunkBlock) chunks.get(chunkNum)).setType_annote(type.getText().replaceAll("\\s", ""));
        treatment(false);
    }//GEN-LAST:event_precActionPerformed
    /**
     * Fonction de gestion du bouton "Bloc suivant"
     */
    private void suivActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_suivActionPerformed
        // TODO add your handling code here:
        this.getContentPane().remove(lab);
        this.getContentPane().repaint();
        ((RTChunkBlock) chunks.get(chunkNum)).setType_annote(type.getText().replaceAll("\\s", ""));
        treatment(true);
    }//GEN-LAST:event_suivActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel chunk;
    private javax.swing.JButton prec;
    private javax.swing.JButton suiv;
    private javax.swing.JTextField type;
    // End of variables declaration//GEN-END:variables
}
