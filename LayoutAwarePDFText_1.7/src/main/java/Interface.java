
import edu.isi.bmkeg.pdf.classification.ruleBased.RuleBasedChunkClassifier;
import edu.isi.bmkeg.pdf.extraction.exceptions.AccessException;
import edu.isi.bmkeg.pdf.extraction.exceptions.EncryptionException;
import edu.isi.bmkeg.pdf.model.ChunkBlock;
import edu.isi.bmkeg.pdf.model.Document;
import edu.isi.bmkeg.pdf.model.RTree.RTChunkBlock;
import edu.isi.bmkeg.pdf.model.RTree.RTModelFactory;
import edu.isi.bmkeg.pdf.model.ordering.SpatialOrdering;
import edu.isi.bmkeg.pdf.parser.RuleBasedParser;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import jxl.write.DateTime;
import org.jpedal.exception.PdfException;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Samih
 */
public class Interface extends javax.swing.JFrame {

    private int pageNumb;
    private Document pdf;
    RuleBasedParser rbp;

    private Boolean horiz, vert, fin, analys;
    private Boolean rogne;
    private Clusterer c;

    /**
     * Creates new form Interface
     */
    public void classify() {
        RuleBasedChunkClassifier classifier = new RuleBasedChunkClassifier("src/main/resources/rules/rules.drl", new RTModelFactory());
        for (int i = 0; i < pdf.getPageList().size(); i++) {
            classifier.classify(pdf.getPageList().get(i).getAllChunkBlocks(SpatialOrdering.COLUMN_AWARE_MIXED_MODE));
        }
    }

    public Interface() {
        initComponents();
        rbp = new RuleBasedParser(new RTModelFactory());
        pageNumb = 0;
        filepath.setText(System.getProperty("user.dir") + "/test.pdf");
        rulepath.setText(System.getProperty("user.dir") + "/src/main/resources/rules/rules.drl");
        horiz = true;
        vert = true;
        fin = false;
        analys = false;
        rogne = false;
        info.setEditable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        filepath = new javax.swing.JTextField();
        precis = new javax.swing.JLabel();
        sensib = new javax.swing.JSlider();
        tolY = new javax.swing.JLabel();
        tolerY = new javax.swing.JSlider();
        charg = new javax.swing.JButton();
        prec = new javax.swing.JButton();
        suiv = new javax.swing.JButton();
        mots = new javax.swing.JCheckBox();
        style = new javax.swing.JCheckBox();
        parc = new javax.swing.JButton();
        panel = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        analyse = new javax.swing.JCheckBox();
        vertFus = new javax.swing.JCheckBox();
        horizFus = new javax.swing.JCheckBox();
        tauxVert = new javax.swing.JTextField();
        tauxHoriz = new javax.swing.JTextField();
        finParFus = new javax.swing.JCheckBox();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        label = new javax.swing.JCheckBox();
        rulepath = new javax.swing.JTextField();
        parcrule = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        anarogn = new javax.swing.JButton();
        rogn = new javax.swing.JButton();
        chevauch = new javax.swing.JCheckBox();
        hierarch = new javax.swing.JCheckBox();
        masterbutton = new javax.swing.JButton();
        genplan = new javax.swing.JButton();
        annot = new javax.swing.JButton();
        précisCalc = new javax.swing.JButton();
        précis = new javax.swing.JLabel();
        save = new javax.swing.JButton();
        chargerAnnot = new javax.swing.JButton();
        rognraz = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        cobweb = new javax.swing.JCheckBox();
        train = new javax.swing.JButton();
        genplanclust = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        info = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Dotum", 0, 36)); // NOI18N
        jLabel1.setText("LaToe 2.0");

        precis.setText("Tolérance X : 50%");

        sensib.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sensibStateChanged(evt);
            }
        });

        tolY.setText("Tolérance Y : 50%");

        tolerY.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tolerYStateChanged(evt);
            }
        });

        charg.setText("Charger le PDF");
        charg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chargActionPerformed(evt);
            }
        });

        prec.setText("Préc.");
        prec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                precActionPerformed(evt);
            }
        });

        suiv.setText("Suiv.");
        suiv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                suivActionPerformed(evt);
            }
        });

        mots.setText("Afficher mots");
        mots.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                motsActionPerformed(evt);
            }
        });

        style.setText("Sensib. Max.");
        style.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                styleActionPerformed(evt);
            }
        });

        parc.setText("Parcourir");
        parc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                parcActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(precis)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(sensib, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(tolY))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(prec)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(charg, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(suiv)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(mots)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(style))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(tolerY, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addGap(32, 32, 32))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(filepath, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(parc, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(filepath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(parc))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(precis)
                    .addComponent(sensib, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tolerY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tolY))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(prec)
                    .addComponent(charg)
                    .addComponent(suiv)
                    .addComponent(mots)
                    .addComponent(style))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        panel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanel2.setMaximumSize(new java.awt.Dimension(230, 32767));

        jLabel2.setBackground(new java.awt.Color(0, 102, 255));
        jLabel2.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Paramètres de l'analyse");
        jLabel2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        analyse.setText("Analyse post-parsing");
        analyse.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        analyse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analyseActionPerformed(evt);
            }
        });

        vertFus.setSelected(true);
        vertFus.setText("Fusion verticale");
        vertFus.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        vertFus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vertFusActionPerformed(evt);
            }
        });

        horizFus.setSelected(true);
        horizFus.setText("Fusion horizontale");
        horizFus.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        horizFus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                horizFusActionPerformed(evt);
            }
        });

        tauxVert.setText("0.2");

        tauxHoriz.setText("0.2");

        finParFus.setText("Fusion fin de paragraphe");
        finParFus.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        finParFus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finParFusActionPerformed(evt);
            }
        });

        jButton1.setText("Actualiser");
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Labellisation");
        jLabel3.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        label.setText("Labelliser");
        label.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        label.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                labelActionPerformed(evt);
            }
        });

        rulepath.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        parcrule.setText("Sélectionner fichier de règles");
        parcrule.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        parcrule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                parcruleActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Redéfinition des bords");
        jLabel4.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        anarogn.setText("Analyser");
        anarogn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                anarognActionPerformed(evt);
            }
        });

        rogn.setText("Rogner");
        rogn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rognActionPerformed(evt);
            }
        });

        chevauch.setText("Analyser blocs en chevauchement");
        chevauch.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        chevauch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chevauchActionPerformed(evt);
            }
        });

        hierarch.setText("Analyse hiérarchique");
        hierarch.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        hierarch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hierarchActionPerformed(evt);
            }
        });

        masterbutton.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        masterbutton.setForeground(new java.awt.Color(204, 0, 0));
        masterbutton.setText("Traitement complet");
        masterbutton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        masterbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                masterbuttonActionPerformed(evt);
            }
        });

        genplan.setText("Générer plan");
        genplan.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        genplan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genplanActionPerformed(evt);
            }
        });

        annot.setText("Annoter manuellement");
        annot.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        annot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                annotActionPerformed(evt);
            }
        });

        précisCalc.setText("Calcul de précision");
        précisCalc.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        précisCalc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                précisCalcActionPerformed(evt);
            }
        });

        précis.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        précis.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        précis.setText("0%");
        précis.setToolTipText("");
        précis.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        save.setText("Sauvegarder l'annotation");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        chargerAnnot.setText("Charger une annotation");
        chargerAnnot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chargerAnnotActionPerformed(evt);
            }
        });

        rognraz.setText("RAZ");
        rognraz.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rognrazActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(vertFus, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(horizFus, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(33, 33, 33)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tauxHoriz, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tauxVert, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(analyse, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(finParFus, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(précisCalc, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(genplan, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(save, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(chargerAnnot, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(anarogn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(rogn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(rognraz, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(chevauch, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(hierarch, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(parcrule, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(rulepath, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(label, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(masterbutton, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(annot, javax.swing.GroupLayout.DEFAULT_SIZE, 205, Short.MAX_VALUE)
                                .addComponent(précis, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(4, 4, 4)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(analyse)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(vertFus)
                    .addComponent(tauxVert, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(horizFus)
                    .addComponent(tauxHoriz, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(finParFus)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addGap(9, 9, 9)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rulepath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(parcrule)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(anarogn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rogn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rognraz)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chevauch)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(hierarch)
                .addGap(5, 5, 5)
                .addComponent(masterbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(genplan)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(annot)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(save)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chargerAnnot)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(précisCalc)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(précis, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Analyse", jPanel2);

        cobweb.setSelected(true);
        cobweb.setText("Cobweb");

        train.setText("Lancer entraînement");
        train.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trainActionPerformed(evt);
            }
        });

        genplanclust.setText("Générer plan");
        genplanclust.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genplanclustActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(train, javax.swing.GroupLayout.DEFAULT_SIZE, 214, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(cobweb)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(genplanclust, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cobweb)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(train)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(genplanclust)
                .addContainerGap(560, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Clustering", jPanel3);

        info.setColumns(20);
        info.setRows(5);
        jScrollPane2.setViewportView(info);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(112, 112, 112)
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(jLabel1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(16, 16, 16))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(24, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void printInfo(String inf) {
        Calendar rightNow = Calendar.getInstance();
        int hour = rightNow.get(Calendar.HOUR_OF_DAY);
        int minutes = rightNow.get(Calendar.MINUTE);
        if (minutes < 10 && hour >= 10) {
            info.setText(info.getText() + "[" + hour + ":0" + minutes + "] " + inf + "\n");
        } else if (hour >= 10 && minutes >= 10) {
            info.setText(info.getText() + "[" + hour + ":" + minutes + "] " + inf + "\n");
        } else if (hour < 10 && minutes >= 10) {
            info.setText(info.getText() + "[0" + hour + ":" + minutes + "] " + inf + "\n");
        } else {
            info.setText(info.getText() + "[0" + hour + ":0" + minutes + "] " + inf + "\n");
        }
    }
    private void chargActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chargActionPerformed
        // TODO add your handling code here:

        try {
            style.setSelected(false);
            rbp.setChangementStyle(false);
            pdf = null;
            this.pdf = rbp.parse(filepath.getText());
        } catch (PdfException ex) {
            printInfo("Erreur de parsing.");
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        } catch (AccessException ex) {
            printInfo("Erreur de parsing.");
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        } catch (EncryptionException ex) {
            printInfo("Erreur de parsing.");
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (pdf != null) {
            printInfo("PDF chargé.");
            pdf.affichage(pageNumb, panel, label.isSelected());
            rogne = false;
            if (analyse.isSelected()) {
                analyseActionPerformed(evt);
            }
            if (chevauch.isSelected()) {
                chevauchActionPerformed(evt);
            }
            if (label.isSelected()) {
                labelActionPerformed(evt);
            }
            if (hierarch.isSelected()) {
                hierarchActionPerformed(evt);
            }
        }
    }//GEN-LAST:event_chargActionPerformed

    private void precActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_precActionPerformed
        // TODO add your handling code here:
        if (pdf != null) {
            if (pageNumb > 0) {
                pageNumb--;
                pdf.affichage(pageNumb, panel, label.isSelected());
            }
        }
    }//GEN-LAST:event_precActionPerformed

    private void suivActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_suivActionPerformed
        // TODO add your handling code here:
        if (pdf != null) {
            if (pageNumb < pdf.getPageList().size() - 1) {
                pageNumb++;
                pdf.affichage(pageNumb, panel, label.isSelected());
            }
        }
    }//GEN-LAST:event_suivActionPerformed

    private void parcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_parcActionPerformed
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser();
        if (fc.showOpenDialog(fc) == JFileChooser.APPROVE_OPTION) {
            filepath.setText(fc.getSelectedFile().getAbsolutePath());
            pageNumb = 0;
        }

    }//GEN-LAST:event_parcActionPerformed

    private void motsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_motsActionPerformed
        // TODO add your handling code here:
        if (pdf != null) {
            if (mots.isSelected()) {
                pdf.setWords(true);
                pdf.affichage(pageNumb, panel, label.isSelected());
            } else {
                pdf.setWords(false);
                pdf.affichage(pageNumb, panel, label.isSelected());
            }
        }
    }//GEN-LAST:event_motsActionPerformed

    private void sensibStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sensibStateChanged
        // TODO add your handling code here:
        float mult = (float) (sensib.getValue() / 100.0);
        float mult2 = (float) (tolerY.getValue() / 100.0);
        rbp.setMult(mult, mult2);
        precis.setText("Tolérance X : " + sensib.getValue() + "%");
    }//GEN-LAST:event_sensibStateChanged

    private void tolerYStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tolerYStateChanged
        // TODO add your handling code here:
        float mult = (float) (sensib.getValue() / 100.0);
        float mult2 = (float) (tolerY.getValue() / 100.0);
        rbp.setMult(mult, mult2);
        tolY.setText("Tolérance Y : " + tolerY.getValue() + "%");
    }//GEN-LAST:event_tolerYStateChanged

    private void styleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_styleActionPerformed
        // TODO add your handling code here:
        rbp.setChangementStyle(style.isSelected());
        analyse.setSelected(false);
        analys = false;
        try {
            pdf = null;
            this.pdf = rbp.parse(filepath.getText());
        } catch (PdfException ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        } catch (AccessException ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        } catch (EncryptionException ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (pdf != null) {
            rogne = false;
            printInfo("Sensibilité maximale activée.");
            pdf.affichage(pageNumb, panel, label.isSelected());
        }
    }//GEN-LAST:event_styleActionPerformed

    private void chargerAnnotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chargerAnnotActionPerformed
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(new File(System.getProperty("user.dir")));
        if (fc.showOpenDialog(fc) == JFileChooser.APPROVE_OPTION) {
            File f = new File(fc.getSelectedFile().getAbsolutePath());
            try {
                BufferedReader br = new BufferedReader(new FileReader(f));
                String buffer = "";
                buffer = br.readLine();
                buffer = buffer.substring(9);
                filepath.setText(buffer);
                buffer = br.readLine().substring(11);
                if (buffer.equals(true)) {
                    rbp.setChangementStyle(true);
                    style.setSelected(true);
                    buffer = br.readLine();
                    buffer = br.readLine();
                } else {
                    buffer = br.readLine().substring(7);
                    sensib.setValue(Integer.parseInt(buffer));
                    precis.setText("Tolérance X : " + sensib.getValue() + "%");
                    buffer = br.readLine().substring(7);
                    tolerY.setValue(Integer.parseInt(buffer));
                    tolY.setText("Tolérance Y : " + tolerY.getValue() + "%");
                }
                pdf = null;
                this.pdf = rbp.parse(filepath.getText());
                buffer = br.readLine().substring(8);
                if (buffer.equals(false)) {
                    analyse.setSelected(false);
                    buffer = br.readLine();
                    buffer = br.readLine();
                    buffer = br.readLine();
                } else {
                    String aux = "";
                    analyse.setSelected(true);
                    analys = true;
                    buffer = br.readLine();
                    if (buffer.substring(8, 12).equals("true")) {
                        vert = true;
                        vertFus.setSelected(true);
                        tauxVert.setText(buffer.substring(13));
                    }
                    buffer = br.readLine();
                    if (buffer.substring(9, 13).equals("true")) {
                        horiz = true;
                        horizFus.setSelected(true);
                        tauxHoriz.setText(buffer.substring(14));
                    }
                    buffer = br.readLine().substring(7);
                    if (buffer.equals("true")) {
                        fin = true;
                        finParFus.setSelected(true);
                    }
                    while (pdf.joinBlocks(vert, horiz, fin, Float.parseFloat(tauxVert.getText()), Float.parseFloat(tauxHoriz.getText())) > pdf.joinBlocks(vert, horiz, fin, Float.parseFloat(tauxVert.getText()), Float.parseFloat(tauxHoriz.getText()))) {
                    }
                    pdf.joinBlocks(vert, horiz, fin, Float.parseFloat(tauxVert.getText()), Float.parseFloat(tauxHoriz.getText()));
                }
                buffer = br.readLine();
                if (buffer.substring(7, 11).equals("true")) {
                    label.setSelected(true);
                    rulepath.setText(buffer.substring(12));
                    pdf.classif(rulepath.getText());
                }
                buffer = br.readLine().substring(6);
                if (buffer.equals("true")) {
                    pdf.rognerAnalyse();
                    pdf.rognerAction();
                    rogne = true;
                }
                buffer = br.readLine().substring(14);
                if (buffer.equals("true")) {
                    chevauch.setSelected(true);
                    pdf.verifSuite();
                }
                pageNumb = 0;
                br.readLine();
                br.readLine();
                pdf.automaticAnnotation(br);
                pdf.affichage(pageNumb, panel, label.isSelected());
                br.close();
                printInfo("Fichier de sauvegarde chargé.");
            } catch (FileNotFoundException ex) {
                printInfo("Erreur de chargement : fichier introuvable.");
                Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                printInfo("Erreur de chargement : accès impossible.");
                Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
            } catch (PdfException ex) {
                printInfo("Erreur de chargement : parsing impossible.");
                Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
            } catch (AccessException ex) {
                printInfo("Erreur de chargement : accès impossible.");
                Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
            } catch (EncryptionException ex) {
                printInfo("Erreur de chargement : accès impossible.");
                Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_chargerAnnotActionPerformed

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        // TODO add your handling code here:
        if (pdf != null) {
            ArrayList<ChunkBlock> aux = pdf.returnAllBlocks();
            JFileChooser fc = new JFileChooser();
            fc.setCurrentDirectory(new File(System.getProperty("user.dir")));
            if (fc.showOpenDialog(fc) == JFileChooser.APPROVE_OPTION) {
                PrintWriter writer;
                try {
                    writer = new PrintWriter(fc.getSelectedFile().getAbsolutePath(), "UTF-8");
                    writer.println("filename:" + filepath.getText());
                    writer.println("strictmode:" + style.isSelected());
                    writer.println("tolerX:" + sensib.getValue());
                    writer.println("tolerY:" + tolerY.getValue());
                    writer.println("analyse:" + analyse.isSelected());
                    writer.println("anaVert:" + vert + "#" + tauxVert.getText());
                    writer.println("anaHoriz:" + horiz + "#" + tauxHoriz.getText());
                    writer.println("anaFin:" + fin);
                    writer.println("labels:" + label.isSelected() + "#" + rulepath.getText());
                    writer.println("rogne:" + rogne);
                    writer.println("chevauchement:" + chevauch.isSelected());
                    writer.println("hierarch:" + hierarch.isSelected());
                    writer.println("chunks : ");
                    for (ChunkBlock ch : aux) {
                        writer.println(ch.getchunkText() + "#*#*#" + ((RTChunkBlock) ch).getType_annote());
                    }
                    writer.println("#END#");
                    writer.close();
                    printInfo("Sauvegarde effectuée dans : " + fc.getSelectedFile().getAbsolutePath() + ".");
                } catch (FileNotFoundException ex) {
                    printInfo("Erreur lors de la sauvegarde : le fichier n'existe pas.");
                    Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
                } catch (UnsupportedEncodingException ex) {
                    printInfo("Erreur inconnue lors de la sauvegarde.");
                    Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_saveActionPerformed

    private void précisCalcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_précisCalcActionPerformed
        // TODO add your handling code here:
        if (pdf != null) {
            float prec = pdf.calculPrecis();
            prec = (int) (prec * 100);
            prec = (float) (prec / 100.0);
            précis.setText(prec + "%");
            System.out.println(prec);
        } else {
            précis.setText("0%");
        }
    }//GEN-LAST:event_précisCalcActionPerformed

    private void annotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_annotActionPerformed
        if (pdf != null) {
            try {
                // TODO add your handling code here:
                InterfaceAnnotation i = new InterfaceAnnotation(pdf, filepath.getText());
                i.setVisible(true);
            } catch (PdfException ex) {
                Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
            } catch (AccessException ex) {
                Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
            } catch (EncryptionException ex) {
                Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_annotActionPerformed

    private void genplanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genplanActionPerformed
        // TODO add your handling code here:
        if (pdf != null) {
            JFrame frame = new JFrame();
            frame.setSize(500, 500);
            frame.setVisible(true);
            frame.setTitle("Plan généré");
            JScrollPane pan = new JScrollPane();
            pdf.genArbre(pan);
            frame.setContentPane(pan);
            printInfo("Plan généré.");
        }
    }//GEN-LAST:event_genplanActionPerformed

    private void masterbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_masterbuttonActionPerformed
        pdf = null;
        label.setSelected(true);
        analyse.setSelected(true);
        chevauch.setSelected(true);
        analys = true;
        try {
            this.pdf = rbp.parse(filepath.getText());
            printInfo("PDF chargé.");
        } catch (PdfException ex) {
            printInfo("Erreur de parsing.");
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        } catch (AccessException ex) {
            printInfo("Erreur de parsing.");
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        } catch (EncryptionException ex) {
            printInfo("Erreur de parsing.");
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        }

        while (pdf.joinBlocks(vert, horiz, fin, Float.parseFloat(tauxVert.getText()), Float.parseFloat(tauxHoriz.getText())) > pdf.joinBlocks(vert, horiz, fin, Float.parseFloat(tauxVert.getText()), Float.parseFloat(tauxHoriz.getText()))) {
        }
        pdf.joinBlocks(vert, horiz, fin, Float.parseFloat(tauxVert.getText()), Float.parseFloat(tauxHoriz.getText()));
        printInfo("Fusion des blocs effectuée.");
        analys = true;
        rogne = true;
        pdf.rognerAnalyse();
        pdf.rognerAction();
        printInfo("Rognage effectué.");
        pdf.verifSuite();
        printInfo("Analyse de chevauchement terminée.");
        pdf.classif(rulepath.getText());
        printInfo("Labellisation terminée.");
        pdf.affichage(pageNumb, panel, label.isSelected());
    }//GEN-LAST:event_masterbuttonActionPerformed

    private void hierarchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hierarchActionPerformed
        // TODO add your handling code here:
        if (pdf != null && hierarch.isSelected()) {
            pdf.hierarchie();
            printInfo("Analyse hiérarchique terminée.");
        }
        if (pdf != null) {
            pdf.affichage(pageNumb, panel, label.isSelected());
        }
    }//GEN-LAST:event_hierarchActionPerformed

    private void chevauchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chevauchActionPerformed
        // TODO add your handling code here:
        if (chevauch.isSelected()) {

            pdf.verifSuite();
            printInfo("Analyse de chevauchement terminée.");
        }
        if (pdf != null) {
            pdf.affichage(pageNumb, panel, label.isSelected());
        }
    }//GEN-LAST:event_chevauchActionPerformed

    private void rognrazActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rognrazActionPerformed
        // TODO add your handling code here:
        try {
            pdf = null;
            this.pdf = rbp.parse(filepath.getText());
        } catch (PdfException ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        } catch (AccessException ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        } catch (EncryptionException ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (analys) {
            while (pdf.joinBlocks(vert, horiz, fin, Float.parseFloat(tauxVert.getText()), Float.parseFloat(tauxHoriz.getText())) > pdf.joinBlocks(vert, horiz, fin, Float.parseFloat(tauxVert.getText()), Float.parseFloat(tauxHoriz.getText()))) {
            }
        }
        rogne = false;
        style.setSelected(false);
        pdf.affichage(pageNumb, panel, label.isSelected());
    }//GEN-LAST:event_rognrazActionPerformed

    private void rognActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rognActionPerformed
        // TODO add your handling code here:
        if (pdf != null) {
            rogne = true;
            pdf.rognerAction();
            printInfo("Rognage effectué.");
            pdf.affichage(pageNumb, panel, label.isSelected());
        }
    }//GEN-LAST:event_rognActionPerformed

    private void anarognActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_anarognActionPerformed
        // TODO add your handling code here:
        if (pdf != null) {
            pdf.rognerAnalyse();
            pdf.affichage(pageNumb, panel, label.isSelected());
        }
    }//GEN-LAST:event_anarognActionPerformed

    private void parcruleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_parcruleActionPerformed
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser();
        if (fc.showOpenDialog(fc) == JFileChooser.APPROVE_OPTION) {
            rulepath.setText(fc.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_parcruleActionPerformed

    private void labelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_labelActionPerformed
        // TODO add your handling code here:
        if (pdf != null) {
            if (label.isSelected()) {
                pdf.classif(rulepath.getText());
                printInfo("Labellisation terminée.");
            }
            pdf.affichage(pageNumb, panel, label.isSelected());
        }
    }//GEN-LAST:event_labelActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        try {
            pdf = null;
            this.pdf = rbp.parse(filepath.getText());
        } catch (PdfException ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        } catch (AccessException ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        } catch (EncryptionException ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (analys) {
            while (pdf.joinBlocks(vert, horiz, fin, Float.parseFloat(tauxVert.getText()), Float.parseFloat(tauxHoriz.getText())) > pdf.joinBlocks(vert, horiz, fin, Float.parseFloat(tauxVert.getText()), Float.parseFloat(tauxHoriz.getText()))) {
            }
        }
        printInfo("Fusion des blocs effectuée.");
        pdf.affichage(pageNumb, panel, label.isSelected());
    }//GEN-LAST:event_jButton1ActionPerformed

    private void finParFusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finParFusActionPerformed
        // TODO add your handling code here:
        if (finParFus.isSelected()) {
            fin = true;
        } else {
            fin = false;
        }
        if (analys) {
            try {
                pdf = null;
                this.pdf = rbp.parse(filepath.getText());
            } catch (PdfException ex) {
                Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
            } catch (AccessException ex) {
                Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
            } catch (EncryptionException ex) {
                Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
            }
            while (pdf.joinBlocks(vert, horiz, fin, Float.parseFloat(tauxVert.getText()), Float.parseFloat(tauxHoriz.getText())) > pdf.joinBlocks(vert, horiz, fin, Float.parseFloat(tauxVert.getText()), Float.parseFloat(tauxHoriz.getText()))) {
            }
            pdf.affichage(pageNumb, panel, label.isSelected());
        }
    }//GEN-LAST:event_finParFusActionPerformed

    private void horizFusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_horizFusActionPerformed
        // TODO add your handling code here:
        if (horizFus.isSelected()) {
            horiz = true;
        } else {
            horiz = false;
        }
        if (analys) {
            try {
                pdf = null;
                this.pdf = rbp.parse(filepath.getText());
            } catch (PdfException ex) {
                Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
            } catch (AccessException ex) {
                Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
            } catch (EncryptionException ex) {
                Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
            }
            while (pdf.joinBlocks(vert, horiz, fin, Float.parseFloat(tauxVert.getText()), Float.parseFloat(tauxHoriz.getText())) > pdf.joinBlocks(vert, horiz, fin, Float.parseFloat(tauxVert.getText()), Float.parseFloat(tauxHoriz.getText()))) {
            }
            pdf.affichage(pageNumb, panel, label.isSelected());
        }
    }//GEN-LAST:event_horizFusActionPerformed

    private void vertFusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vertFusActionPerformed
        // TODO add your handling code here:
        if (vertFus.isSelected()) {
            vert = true;
        } else {
            vert = false;
        }
        if (analys) {
            try {
                pdf = null;
                this.pdf = rbp.parse(filepath.getText());
            } catch (PdfException ex) {
                Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
            } catch (AccessException ex) {
                Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
            } catch (EncryptionException ex) {
                Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
            }
            while (pdf.joinBlocks(vert, horiz, fin, Float.parseFloat(tauxVert.getText()), Float.parseFloat(tauxHoriz.getText())) > pdf.joinBlocks(vert, horiz, fin, Float.parseFloat(tauxVert.getText()), Float.parseFloat(tauxHoriz.getText()))) {
            }
            pdf.affichage(pageNumb, panel, label.isSelected());
        }
    }//GEN-LAST:event_vertFusActionPerformed

    private void analyseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analyseActionPerformed
        // TODO add your handling code here:
        if (pdf != null) {
            if (analyse.isSelected()) {
                while (pdf.joinBlocks(vert, horiz, fin, Float.parseFloat(tauxVert.getText()), Float.parseFloat(tauxHoriz.getText())) > pdf.joinBlocks(vert, horiz, fin, Float.parseFloat(tauxVert.getText()), Float.parseFloat(tauxHoriz.getText()))) {
                }
                pdf.joinBlocks(vert, horiz, fin, Float.parseFloat(tauxVert.getText()), Float.parseFloat(tauxHoriz.getText()));
                analys = true;
            } else {
                try {
                    pdf = null;
                    this.pdf = rbp.parse(filepath.getText());
                } catch (PdfException ex) {
                    Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
                } catch (AccessException ex) {
                    Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
                } catch (EncryptionException ex) {
                    Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            printInfo("Fusion des blocs effectuée.");
            pdf.affichage(pageNumb, panel, label.isSelected());
        }
    }//GEN-LAST:event_analyseActionPerformed

    private void trainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trainActionPerformed
        // TODO add your handling code here:
        if (cobweb.isSelected() || pdf != null) {
            c = new Clusterer(pdf);
            c.fillInstances();
            try {
                c.classify();
            } catch (Exception ex) {
                Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_trainActionPerformed

    private void genplanclustActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genplanclustActionPerformed
        // TODO add your handling code here:
        if (pdf != null || c != null) {
            JFrame frame = new JFrame();
            frame.setSize(500, 500);
            frame.setVisible(true);
            frame.setTitle("Plan généré");
            JScrollPane pan = new JScrollPane();
            try {
                JLabel lab = new JLabel("<html>"+c.classify().replaceAll("\\n", "<br>")+"</html>");
                pan.add(lab);
                pan.setViewportView(lab);
            } catch (Exception ex) {
                Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
            }
            frame.setContentPane(pan);
            printInfo("Plan généré.");
        }
    }//GEN-LAST:event_genplanclustActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interface.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interface.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interface.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interface.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Interface i = new Interface();
                i.setTitle("LaToe 2.0");
                i.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox analyse;
    private javax.swing.JButton anarogn;
    private javax.swing.JButton annot;
    private javax.swing.JButton charg;
    private javax.swing.JButton chargerAnnot;
    private javax.swing.JCheckBox chevauch;
    private javax.swing.JCheckBox cobweb;
    private javax.swing.JTextField filepath;
    private javax.swing.JCheckBox finParFus;
    private javax.swing.JButton genplan;
    private javax.swing.JButton genplanclust;
    private javax.swing.JCheckBox hierarch;
    private javax.swing.JCheckBox horizFus;
    private javax.swing.JTextArea info;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JCheckBox label;
    private javax.swing.JButton masterbutton;
    private javax.swing.JCheckBox mots;
    private javax.swing.JPanel panel;
    private javax.swing.JButton parc;
    private javax.swing.JButton parcrule;
    private javax.swing.JButton prec;
    private javax.swing.JLabel precis;
    private javax.swing.JLabel précis;
    private javax.swing.JButton précisCalc;
    private javax.swing.JButton rogn;
    private javax.swing.JButton rognraz;
    private javax.swing.JTextField rulepath;
    private javax.swing.JButton save;
    private javax.swing.JSlider sensib;
    private javax.swing.JCheckBox style;
    private javax.swing.JButton suiv;
    private javax.swing.JTextField tauxHoriz;
    private javax.swing.JTextField tauxVert;
    private javax.swing.JLabel tolY;
    private javax.swing.JSlider tolerY;
    private javax.swing.JButton train;
    private javax.swing.JCheckBox vertFus;
    // End of variables declaration//GEN-END:variables
}
